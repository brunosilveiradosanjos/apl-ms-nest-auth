# A descriptive name for your workflow
name: CI Pipeline

# Controls when the workflow will run
on:
  # Triggers the workflow on push events for the main and development branches
  push:
    branches: [main, homologation, development]

  # Triggers the workflow on pull request events for the main and development branches
  pull_request:
    branches: [main, homologation, development]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "test"
  test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Define job-level permissions. 'contents: read' is needed to checkout other repositories.
    permissions:
      contents: read

    # Service containers provide a running PostgreSQL database for the E2E tests
    services:
      # The label of the service container
      postgres:
        # The Docker image to use
        image: postgres:15-alpine
        # Environment variables to set in the container
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: auth_db_test
        # Options to pass to the docker create command
        # This health check is crucial. It ensures that the subsequent steps
        # will not run until the PostgreSQL server is fully initialized and ready.
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
          - 5432:5432 # Maps the service port to the runner's localhost

    # A job contains a sequence of tasks called steps
    steps:
      # Step 1: Checkout the main application code into a subdirectory
      - name: Checkout application code
        uses: actions/checkout@v4
        with:
          path: main-app

      # Step 2: Securely checkout the private configuration repository
      - name: Checkout config repository
        uses: actions/checkout@v4
        with:
          repository: brunosilveiradosanjos/apl-ms-auth-config # IMPORTANT: Your private config repo
          token: ${{ secrets.GH_PAT }} # A Personal Access Token stored in GitHub Secrets
          path: config

      # Step 3: Manually download and install the latest versions of sops, age, and yq.
      # This is more reliable than relying on apt-get or potentially unavailable actions.
      - name: Setup SOPS, age, and yq
        run: |
          # Install SOPS
          SOPS_VERSION=$(curl -s "https://api.github.com/repos/getsops/sops/releases/latest" | grep -Po '"tag_name": "\K.*?(?=")' | sed 's/v//')
          wget "https://github.com/getsops/sops/releases/download/v${SOPS_VERSION}/sops-v${SOPS_VERSION}.linux.amd64"
          sudo mv "sops-v${SOPS_VERSION}.linux.amd64" /usr/local/bin/sops
          sudo chmod +x /usr/local/bin/sops

          # Install age
          AGE_VERSION=$(curl -s "https://api.github.com/repos/FiloSottile/age/releases/latest" | grep -Po '"tag_name": "\K.*?(?=")' | sed 's/v//')
          wget "https://github.com/FiloSottile/age/releases/download/v${AGE_VERSION}/age-v${AGE_VERSION}-linux-amd64.tar.gz"
          tar -xzf "age-v${AGE_VERSION}-linux-amd64.tar.gz"
          sudo mv age/age /usr/local/bin/
          sudo mv age/age-keygen /usr/local/bin/

          # Install yq
          YQ_VERSION=$(curl -s "https://api.github.com/repos/mikefarah/yq/releases/latest" | grep -Po '"tag_name": "\K.*?(?=")' | sed 's/v//')
          wget "https://github.com/mikefarah/yq/releases/download/v${YQ_VERSION}/yq_linux_amd64"
          sudo mv yq_linux_amd64 /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq

      # Step 5: Decrypt the config file and transform it into a .env file for the application
      - name: Decrypt configuration and create .env file
        run: |
          # Use the SOPS_AGE_KEY secret to decrypt the development config
          sops --decrypt config/development/config.yml | \
          # Use yq to convert the YAML to a 'KEY="VALUE"' format
          yq -r 'to_entries | .[] | .key + "=" + "\"" + .value + "\""' \
          # Save the output to a .env file inside the main application's directory
          > main-app/.env
        env:
          # The SOPS_AGE_KEY must be stored in GitHub repository secrets
          SOPS_AGE_KEY: ${{ secrets.SOPS_AGE_KEY }}

      # Step 6: Set the working directory for all subsequent steps
      - name: Set working directory
        run: echo "WORK_DIR=main-app" >> $GITHUB_ENV

      # Step 7: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: '${{ env.WORK_DIR }}/package-lock.json'

      # Step 8: Install application dependencies
      - name: Install dependencies
        working-directory: ${{ env.WORK_DIR }}
        run: npm ci

      # Step 9: Run the linter
      - name: Run lint check
        working-directory: ${{ env.WORK_DIR }}
        run: npm run lint

      # Step 10: Run the unit tests
      - name: Run unit tests
        working-directory: ${{ env.WORK_DIR }}
        run: npm test

      # Step 11: Run the end-to-end tests
      # No 'env' block is needed here because the app will now automatically
      # load its configuration from the .env file we created in the decrypt step.
      - name: Run E2E tests
        working-directory: ${{ env.WORK_DIR }}
        run: npm run test:e2e
