# A descriptive name for your workflow
name: CI Pipeline

# Controls when the workflow will run
on:
  push:
    branches: [main, development]
  pull_request:
    branches: [main, development]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    # Set a default working directory for all 'run' steps in this job.
    defaults:
      run:
        working-directory: ./main-app

    # Service containers provide a running PostgreSQL database for the E2E tests
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: auth_db_test
        # The health check ensures the database is ready before tests start
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
          - 5432:5432 # Maps the service port to the runner's localhost

    # A job contains a sequence of tasks called steps
    steps:
      # Step 1: Checkout the main application code
      - name: Checkout application code
        uses: actions/checkout@v4
        with:
          path: main-app

      # Step 2: Checkout the public configuration repository
      - name: Checkout config repository
        uses: actions/checkout@v4
        with:
          repository: brunosilveiradosanjos/apl-ms-auth-config
          path: config

      # Step 3: Manually download and install the latest versions of sops, age, and yq
      - name: Setup SOPS, age, and yq
        working-directory: ./
        run: |
          # Install SOPS
          SOPS_VERSION=$(curl -s "https://api.github.com/repos/getsops/sops/releases/latest" | grep -Po '"tag_name": "\K.*?(?=")' | sed 's/v//')
          wget "https://github.com/getsops/sops/releases/download/v${SOPS_VERSION}/sops-v${SOPS_VERSION}.linux.amd64"
          sudo mv "sops-v${SOPS_VERSION}.linux.amd64" /usr/local/bin/sops
          sudo chmod +x /usr/local/bin/sops
          # Install age
          AGE_VERSION=$(curl -s "https://api.github.com/repos/FiloSottile/age/releases/latest" | grep -Po '"tag_name": "\K.*?(?=")' | sed 's/v//')
          wget "https://github.com/FiloSottile/age/releases/download/v${AGE_VERSION}/age-v${AGE_VERSION}-linux-amd64.tar.gz"
          tar -xzf "age-v${AGE_VERSION}-linux-amd64.tar.gz"
          sudo mv age/age /usr/local/bin/
          sudo mv age/age-keygen /usr/local/bin/
          # Install yq
          YQ_VERSION=$(curl -s "https://api.github.com/repos/mikefarah/yq/releases/latest" | grep -Po '"tag_name": "\K.*?(?=")' | sed 's/v//')
          wget "https://github.com/mikefarah/yq/releases/download/v${YQ_VERSION}/yq_linux_amd64"
          sudo mv yq_linux_amd64 /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq

      # Step 4: Decrypt secrets and export them as environment variables for the job
      - name: Decrypt and Export Secrets
        working-directory: ./
        run: |
          sops --decrypt config/development/config.yml | \
          yq -r 'to_entries | .[] | .key + "=" + "\"" + .value + "\""' >> $GITHUB_ENV
        env:
          SOPS_AGE_KEY: ${{ secrets.SOPS_AGE_KEY }}

      # Step 5: Override the DB_HOST for the CI environment to use the service name.
      - name: Override DB Host and Set Node Env for CI
        working-directory: ./
        run: |
          echo "DB_HOST=postgres" >> $GITHUB_ENV
          echo "NODE_ENV=ci" >> $GITHUB_ENV

      # Step 6: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: 'main-app/package-lock.json'

      # Step 7: Install application dependencies
      - name: Install dependencies
        run: npm ci

      # --- REMOVED PRISMA STEPS ---
      # The 'prisma generate' and 'prisma migrate' steps are no longer needed.

      # Step 8: Initialize Database from SQL file
      # This is the NEW step. It uses the 'psql' client to run your init script.
      - name: Initialize Database Schema
        # The PGPASSWORD env var is used by psql to authenticate without a prompt.
        env:
          PGPASSWORD: testpassword # This must match the password in the services block
        run: |
          # Wait a moment to ensure the DB service is fully accepting connections.
          sleep 5
          # Execute the SQL script against the 'postgres' service container.
          # -h: hostname, -U: user, -d: database name, -f: file
          psql -h postgres -U postgres -d auth_db_test -f main-app/db/init.sql

      # Step 9: Run the linter
      - name: Run lint check
        run: npm run lint

      # Step 10: Run the unit tests
      - name: Run unit tests
        run: npm run test

      # Step 11: Run the end-to-end tests
      - name: Run E2E tests
        run: npm run test:e2e:run
